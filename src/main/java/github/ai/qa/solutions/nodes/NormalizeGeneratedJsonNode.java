package github.ai.qa.solutions.nodes;

import static github.ai.qa.solutions.state.AgentState.StateKey.GENERATED_JSON;

import github.ai.qa.solutions.state.AgentState;
import github.ai.qa.solutions.tools.NormalizeGeneratedJsonTool;
import java.util.Map;
import org.bsc.langgraph4j.action.NodeAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Normalizes JSON generated by upstream LLM nodes and emits heuristic warnings.
 *
 * <p>Key behaviors:
 * - Remove Markdown code fences (```json ... ```), if present.
 * - Normalize textual values across the entire JSON tree:
 *   trim ASCII/Unicode spaces, unify Unicode dashes to '-', convert full-width digits to ASCII,
 *   and clean certain phone-like patterns (e.g., "+123-456" → "123-456").
 * - Detect placeholder-looking values (repeated/monotonic digits, literals like "123-456",
 *   or words like "test"/"пример") and record them as warnings.
 *
 * <p>Outputs written back to {@link github.ai.qa.solutions.state.AgentState}:
 * - GENERATED_JSON: normalized JSON string
 *
 * <p>Thread-safety: stateless; safe to reuse.</p>
 */
@Service
public class NormalizeGeneratedJsonNode implements NodeAction<AgentState> {
    /** Framework logger for normalization diagnostics. */
    private static final Logger log = LoggerFactory.getLogger(NormalizeGeneratedJsonNode.class);
    /** Tool for normalizing json */
    private final NormalizeGeneratedJsonTool normalizeGeneratedJsonTool;

    /**
     * Full constructor for explicit dependency injection and testing.
     *
     * @param normalizeGeneratedJsonTool normalization tool
     */
    public NormalizeGeneratedJsonNode(final NormalizeGeneratedJsonTool normalizeGeneratedJsonTool) {
        this.normalizeGeneratedJsonTool = normalizeGeneratedJsonTool;
    }

    /**
     * Normalizes the JSON string from GENERATED_JSON and returns updated state entries.
     *
     * @param state agent state containing the raw JSON at GENERATED_JSON
     * @return map with normalized JSON, warnings, and signature
     * @throws IllegalStateException if the input cannot be parsed as JSON
     */
    @Override
    public Map<String, Object> apply(final AgentState state) {
        log.info("▶️ Stage: NormalizeGeneratedJsonNode — starting");
        try {
            final String json = state.get(GENERATED_JSON);
            final String normalizedJson = normalizeGeneratedJsonTool.normalize(json);

            return Map.of(GENERATED_JSON.name(), normalizedJson);
        } catch (Exception e) {
            throw new IllegalStateException("Failed to normalize JSON", e);
        }
    }
}
